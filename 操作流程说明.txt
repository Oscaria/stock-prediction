注意：代码中的路径和文件名没有参考价值，具体按照操作流程一步步操作即可

建立新闻事件分类器
1.用data_sample.zip跑通train.py
输出：trained_results和checkpoints两个文件夹

针对个股得到事件分类结果
1.首先要将原始的新闻数据集进行分词，得到数据集里xxxx新闻分词.csv的文件
2.用xxxx新闻分词.csv跑通getCategory.py（我记得用原始新闻数据跑会有bug，尝试先把新闻内容分词再跑）
输出：predicted_results文件夹，里面会有分类结果的csv文件

建立新闻矩阵：
1.newsMatrix.py
	输入：分类结果csv文件
	输出：新闻矩阵（应该要手动把日期那一列粘过去）

建立财务矩阵：
1. 删0：手动将原始财务数据中含有0的数据行删区
2. 通过涨跌幅打label.py：
	输入：删0后的财务数据
	输出：根据涨跌幅判定是涨还是跌并打label，涨标记为1，跌标记为0，生成阈值分别为0.01至0.09的九个csv文件
3. 归一化处理zscore.py：
	输入：打label后的csv文件
	输出：对数据部分进行zscore归一化处理后的csv文件
4. 财务和新闻矩阵合并.py：
	输入：归一化处理后的财务矩阵；新闻矩阵
	输出：具有相同日期的财务矩阵和新闻矩阵
	备注：需要在excel中打开文件，手动调整两个矩阵中日期一列的文本格式（没有日期则需要手动添加）；统一格式才能正确输出。

合并情感维度：
1. Bi-LSTM：（使用Bi-LSTM模型训练得到情感预测模型）		
	a. ./data/preProcess/fenci.py：
		输入：已标注用于训练的新闻数据；newsMatrix.py生成的新闻矩阵
		输出：分词后的用于训练的新闻数据；分词后的新闻矩阵
	b. 通过word2vec得到用于训练的新闻数据的词向量bin文件
	c. ./code/Bi-LSTM.py：
		输入：
			- 已进行标注和分词的新闻数据；
			- 分词后的新闻矩阵（用于进行预测）
			- stopwords.txt
			- word2vec.bin
		输出：对分词后的新闻矩阵进行预测的结果
	d. ./code/merge.py
		输入：预测结果（正向情感标为1，负向情感标为0）；新闻矩阵
		输出：附上日期信息的情感矩阵（原预测结果文件中仅有一列预测值，merge.py将新闻矩阵中日期等信息合并进来；并将负向情感标为-1）
2. 新闻和情感矩阵合并.py：
	输入：情感矩阵；新闻矩阵（是和财务矩阵合并后的新闻矩阵）
	输出：合并后的情感矩阵（保留了与新闻矩阵、财务矩阵一样具有相同日期的数据项）
3. MergeSentimentMatrix.py：
	输入：合并后的情感矩阵
	输出：SentiMerge情感矩阵（输入文件中存在大量日期相同的数据项，MergeSentimentMatrix.py将这些同一天的情感值合并在一起，输出一个值代表这一天的情感走向）

models：
1. finance_LSTM.py：
	输入：合并后的财务矩阵
2. multi_input_LSTM_event.py:
	输入：手动合并归并日期后的财务矩阵和新闻矩阵
3. multi_input_LSTM_event+senti.py:
	输入：手动合并归并日期后的财务矩阵、新闻矩阵和情感矩阵；需要根据前面的文件和程序，准备一个进行了删0和日期合并但未归一化的财务数据文件
	输出：预测结果
4. gbdt.py:
	输入：手动合并归并日期后的财务矩阵、新闻矩阵和情感矩阵
	
可视化：
1. 建立可视化输入数据.py：
	输入：multi_input_LSTM_event+senti.py输出的预测结果
	输出：满足可视化.py文件所需的csv文件
2. 可视化.py：
	输出：可视化结果
